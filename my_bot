Python 3.6.4 (default, Jan  5 2018, 02:13:53) 
[GCC 7.2.0] on linux
Type "copyright", "credits" or "license()" for more information.
>>> import requests
>>> 
>>> url = "https://api.telegram.org/bot539298818:AAFFnNI_V9XYwq6pie5Hj_GazxnVSIO4Cm0/"
>>> 
>>> def get_updates_json(request):
	response = requests.get(request + 'getUpdates')
	return response.json()

>>> def last_update(data):
	results = data['result']
	total_updates = len(results) - 1
	return results[total_updates]

>>> def get_chat_id(update):
	chat_id = update['message']['chat']['id']
	return chat_id

>>> def send_mess(chat, text):
	params = {'chat_id': chat, 'text': text}
	response = requests.post(url + 'sendMessage', data=params)
	return response

>>> chat_id = get_chat_id(last_update(get_updates_json(url)))
>>> send_mess(chat_id, 'Welcome')
<Response [200]>
>>> def main():
	update_id = last_update(get_updates_json(url))['update_id']
	while True:
		if update_id == last_update(get_updates_json(url))['update_id']:
		send_mess(get_chat_id(last_update(get_updates_json(url))), 'Hello')
		
SyntaxError: expected an indented block
>>> def main():
	update_id = last_update(get_updates_json(url))['update_id']
	while True:
		if update_id == last_update(get_updates_json(url))['update_id']:
		send_mess(get_chat_id(last_update(get_updates_json(url))), 'Hello')
		
SyntaxError: expected an indented block
>>> def main():
	update_id = last_update(get_updates_json(url))['update_id']
	while True:
	if update_id == last_update(get_updates_json(url))['update_id']:
		
SyntaxError: expected an indented block
>>> def main():
	update_id = last_update(get_updates_json(url))['update_id']
	while True:
		if update_id == last_update(get_updates_json(url))['update_id']:
			send_mess(get_chat_id(last_update(get_updates_json(url))), 'Hello')
			update_id += 1
			sleep(1)

			
>>> if __name__ == '__main__':
	main()

	
Traceback (most recent call last):
  File "<pyshell#48>", line 2, in <module>
    main()
  File "<pyshell#45>", line 7, in main
    sleep(1)
NameError: name 'sleep' is not defined
>>> def main():
	update_id = last_update(get_updates_json(url))['update_id']
	while True:
		if update_id == last_update(get_updates_json(url))['update_id']:
		   send_mess(get_chat_id(last_update(get_updates_json(url))), 'Hello')
		   update_id += 1
		sleep(1)

		
>>> if __name__ == '__main__':
	main()

	
Traceback (most recent call last):
  File "<pyshell#59>", line 2, in <module>
    main()
  File "<pyshell#56>", line 7, in main
    sleep(1)
NameError: name 'sleep' is not defined
>>> def get_updates_json(request):
	params = {'timeout': 100, 'offset': None}
	response = requests.get(request + 'getUpdates', data=params)
	 return response.json()
	
SyntaxError: unexpected indent
>>> def get_updates_json(request):
	params = {'timeout': 100, 'offset': None}
	response = requests.get(request + 'getUpdates', data=params)
	return response.json()

>>> import requests
>>> import datetime
>>> class BotHandler:
	def __init__(self, token):
		self.token = token
		self.api_url = "https://api.telegram.org/bot{}/".format(token)

		
>>> def get_updates(self, offset=None, timeout=30):
	method = 'getUpdates'
	params = {'timeout': timeout, 'offset': offset}
	resp = requests.get(self.api_url + method, params)
	result_json = resp.json()['result']
	return result_json

>>> def send_message(self, chat_id, text):
	params = {'chat_id': chat_id, 'text': text}
	method = 'sendMessage'
	resp = requests.post(self.api_url + method, params)
	return resp

>>> def get_last_update(self):
	get_result = self.get_updates()

	
>>>  if len(get_result) > 0:
	
SyntaxError: unexpected indent
>>> if len(get_result) > 0:
	last_update = get_result[-1]

	
Traceback (most recent call last):
  File "<pyshell#95>", line 1, in <module>
    if len(get_result) > 0:
NameError: name 'get_result' is not defined
>>> if len(get_result) > 0:
	last_update = get_result[-1]
else:
	last_update = get_result[len(get_result)]
return last_update
SyntaxError: invalid syntax
>>> if len(get_result) > 0:
            last_update = get_result[-1]
        else:
            last_update = get_result[len(get_result)]

        return last_update
SyntaxError: unindent does not match any outer indentation level
>>> if len(get_result) > 0:
	last_update = get_result[-1]
else:
	last_update = get_result[len(get_result)]
	return last_update
SyntaxError: 'return' outside function
>>> if len(get_result) > 0:
	last_update = get_result[-1]
else:
	last_update = get_result[len(get_result)]
    return last_update
SyntaxError: unindent does not match any outer indentation level
>>> if len(get_result) > 0:
	last_update = get_result[-1]
else:
	last_update = get_result[len(get_result)]
	    return last_update
	
SyntaxError: unexpected indent
>>> greet_bot = BotHandler(token)
Traceback (most recent call last):
  File "<pyshell#120>", line 1, in <module>
    greet_bot = BotHandler(token)
NameError: name 'token' is not defined
>>> 
